Miscellaneous console sessions mostly meant to screen for random errors.

>>> from fst import *


........................................................................................................................
>>> f = FST('''
... class cls:
...     def __init__(self):
...         pass
...
...     def meth(self, a):
...         return a
... ''')
>>> f
<ClassDef ROOT 1,0..6,16>
>>> f.src
'\nclass cls:\n    def __init__(self):\n        pass\n\n    def meth(self, a):\n        return a\n'
>>> print(_)
<BLANKLINE>
class cls:
    def __init__(self):
        pass
<BLANKLINE>
    def meth(self, a):
        return a
<BLANKLINE>
>>> f.body['meth']
<FunctionDef 5,4..6,16>
>>> _.src
'def meth(self, a):\n        return a'
>>> f.body['meth']
<FunctionDef 5,4..6,16>
>>> print(f.body['meth'].src)
def meth(self, a):
        return a
>>> print(f.body['meth'].copy().src)
def meth(self, a):
    return a
>>> f.body.append(f.body['meth'].copy())
<<ClassDef ROOT 1,0..9,16>.body[0:3] [<FunctionDef 2,4..3,12>, <FunctionDef 5,4..6,16>, <FunctionDef 8,4..9,16>]>
>>> print(f.src)
<BLANKLINE>
class cls:
    def __init__(self):
        pass
<BLANKLINE>
    def meth(self, a):
        return a
<BLANKLINE>
    def meth(self, a):
        return a
<BLANKLINE>
>>> f.body[-1]
<FunctionDef 8,4..9,16>
>>> f.body[-1].name = 'blahblahblah'
>>> print(f.src)
<BLANKLINE>
class cls:
    def __init__(self):
        pass
<BLANKLINE>
    def meth(self, a):
        return a
<BLANKLINE>
    def blahblahblah(self, a):
        return a
<BLANKLINE>


........................................................................................................................
>>> f = FST('{a: b}')
>>> f.keys[0]
<Name 0,1..0,2>

>>> f.keys[0] = 'x := y'
>>> f.src
'{(x := y): b}'

>>> f.keys[0] = None
>>> f.src
'{**b}'


........................................................................................................................
>>> f = FST('class a: pass')
>>> f.bases = 'base,'
>>> g = FST('del a')
>>> g.targets = 'b'
>>> g.src
'del b'
>>> g.targets = 'c,'
>>> g.src
'del c'
>>> FST('del z,')
<Delete ROOT 0,0..0,6>
>>> _.dump()
Delete - ROOT 0,0..0,6
  .targets[1]
  0] Name 'z' Del - 0,4..0,5
>>> f.src
'class a(base): pass'
>>> g.src
'del c'
>>> g.dump()
Delete - ROOT 0,0..0,5
  .targets[1]
  0] Name 'c' Del - 0,4..0,5
>>> FST('del z,').dump()
Delete - ROOT 0,0..0,6
  .targets[1]
  0] Name 'z' Del - 0,4..0,5
>>> FST('del z,', 'stmt').dump()
Delete - ROOT 0,0..0,6
  .targets[1]
  0] Name 'z' Del - 0,4..0,5
>>> h = FST('del z,')
>>> h.targets = 'x'
>>> h.src
'del x'
>>> h.targets = 'x,'
>>> h.src
'del x'
>>> h = FST('del z,')
>>> h.targets[0] = 'a, b'
>>> h.src
'del (a, b),'
>>> h.verify()
<Delete ROOT 0,0..0,11>
>>> h.dump('s')
0: del (a, b),
Delete - ROOT 0,0..0,11
  .targets[1]
  0] Tuple - 0,4..0,10
    .elts[2]
    0] Name 'a' Del - 0,5..0,6
    1] Name 'b' Del - 0,8..0,9
    .ctx Del
>>> FST('class cls(b,): pass')
<ClassDef ROOT 0,0..0,19>
>>> f = _
>>> f.dump()
ClassDef - ROOT 0,0..0,19
  .name 'cls'
  .bases[1]
  0] Name 'b' Load - 0,10..0,11
  .body[1]
  0] Pass - 0,15..0,19
>>> f.src
'class cls(b,): pass'
>>> f.bases = 'z,'
>>> f.src
'class cls(z): pass'
>>> f.dump()
ClassDef - ROOT 0,0..0,18
  .name 'cls'
  .bases[1]
  0] Name 'z' Load - 0,10..0,11
  .body[1]
  0] Pass - 0,14..0,18


........................................................................................................................
>>> f = FST('call(*not a, *[] or ())')
>>> g = f.get_slice(pars=False)
>>> g.src
'(*not a, *[] or ())'
>>> g.dump()
Tuple - ROOT 0,0..0,19
  .elts[2]
  0] Starred - 0,1..0,7
    .value UnaryOp - 0,2..0,7
      .op Not - 0,2..0,5
      .operand Name 'a' Load - 0,6..0,7
    .ctx Load
  1] Starred - 0,9..0,18
    .value BoolOp - 0,10..0,18
      .op Or
      .values[2]
      0] List - 0,10..0,12
        .ctx Load
      1] Tuple - 0,16..0,18
        .ctx Load
    .ctx Load
  .ctx Load
>>> f.args = None
>>> f.src
'call()'
>>> f.args = g.copy()
>>> f.src
'call(*not a, *[] or ())'
