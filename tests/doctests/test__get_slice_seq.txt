>>> from fst import *
>>> from fst.fst_slice import _get_slice_seq


>>> def test_cut(fst_, start, stop, trivia=None, self_tail_sep=None, ret_tail_sep=None):
...     ast_type = fst_.a.__class__
...     elts     = fst_.a.elts
...     off      = 1
...
...     if ast_type is Tuple:
...         prefix, suffix = '()'
...     elif ast_type is List:
...         prefix, suffix = '[]'
...     else:
...         raise NotImplementedError
...
...     if start:
...         _, _, bound_ln, bound_col = elts[start - 1].f.pars()
...     else:
...         bound_ln, bound_col, _, _ = fst_.loc
...         bound_col += off
...
...     return _get_slice_seq(fst_, start, stop, len(fst_.elts), True, ast_type(elts=fst_.a.elts[start : stop]),
...         elts[stop - 1], elts[start].f.pars(), elts[stop - 1].f.pars(),
...         bound_ln, bound_col, fst_.end_ln, fst_.end_col - 1,
...         trivia, prefix=prefix, suffix=suffix, self_tail_sep=self_tail_sep, ret_tail_sep=ret_tail_sep)


basic

>>> print(test_cut(f := FST(r"""
... [PRE, GET,]
... """.strip()), 1, 2, (False, False)).src, f.src)
[GET,] [PRE]

>>> print(test_cut(f := FST(r"""
... (PRE, GET,)
... """.strip()), 1, 2, (False, False)).src, f.src)
(GET,) (PRE,)

>>> print(test_cut(f := FST(r"""
... [PRE, GET, POST]
... """.strip()), 1, 2, (False, False)).src, f.src)
[GET] [PRE, POST]

>>> print(test_cut(f := FST(r"""
... (PRE, GET, POST)
... """.strip()), 1, 2, (False, False)).src, f.src)
(GET,) (PRE, POST)

>>> print(test_cut(f := FST(r"""
... [PRE, GET ,  POST]
... """.strip()), 1, 2, (False, False)).src, f.src)
[GET] [PRE, POST]


# don't need trailing copy separator and have (list, two element tuple)

>>> print(test_cut(f := FST(r"""
... [PRE, GET ,  POST]
... """.strip()), 1, 2, (False, False)).src, f.src)
[GET] [PRE, POST]

>>> print(test_cut(f := FST(r"""
... (PRE, GET ,  POST)
... """.strip()), 1, 2, (False, False)).src, f.src)
(GET ,) (PRE, POST)

>>> print(test_cut(f := FST(r"""
... (PRE, GET0, GET1 ,  POST)
... """.strip()), 1, 3, (False, False)).src, f.src)
(GET0, GET1) (PRE, POST)

>>> print(test_cut(f := FST(r"""
... [PRE, GET,
...  POST]
... """.strip()), 1, 2, (False, False)).src, f.src)
[GET] [PRE,
 POST]

>>> print(test_cut(f := FST(r"""
... (PRE, GET,
...  POST)
... """.strip()), 1, 2, (False, False)).src, f.src)
(GET,) (PRE,
 POST)

>>> print(test_cut(f := FST(r"""
... (PRE, GET0, GET1 ,
...  POST)
... """.strip()), 1, 3, (False, False)).src, f.src)
(GET0, GET1) (PRE,
 POST)

>>> print(test_cut(f := FST(r"""
... [PRE, GET, \
...  POST]
... """.strip()), 1, 2, (False, False)).src, f.src)
[GET] [PRE, \
 POST]

>>> print(test_cut(f := FST(r"""
... (PRE, GET, \
...  POST)
... """.strip()), 1, 2, (False, False)).src, f.src)
(GET,) (PRE, \
 POST)

>>> print(test_cut(f := FST(r"""
... (PRE, GET0, GET1 , \
...  POST)
... """.strip()), 1, 3, (False, False)).src, f.src)
(GET0, GET1) (PRE, \
 POST)

>>> print(test_cut(f := FST(r"""
... (PRE, GET,  # trivia
...  POST)
... """.strip()), 1, 2, (False, False)).src, f.src)
(GET,) (PRE, # trivia
 POST)

>>> print(test_cut(f := FST(r"""
... [PRE, GET,  # trivia
...  POST]
... """.strip()), 1, 2, (False, 'line')).src, f.src)
[GET,  # trivia
] [PRE,
 POST]

>>> print(test_cut(f := FST(r"""
... (PRE, GET,  # trivia
...  POST)
... """.strip()), 1, 2, (False, 'line')).src, f.src)
(GET,  # trivia
) (PRE,
 POST)

>>> print(test_cut(f := FST(r"""
... (PRE, GET0, GET1 ,  # trivia
...  POST)
... """.strip()), 1, 3, (False, 'line')).src, f.src)
(GET0, GET1 ,  # trivia
) (PRE,
 POST)


>>> print(test_cut(f := FST(r"""
... (PRE, GET0, GET1 ,  POST)
... """.strip()),
...     0, 3, (False, False)).src, f.src)
(PRE, GET0, GET1) (POST,)

>>> print(test_cut(f := FST(r"""
... [PRE, GET, \
...  POST]
... """.strip()),
...     0, 2, (False, False)).src, f.src)
[PRE, GET] [ \
 POST]

>>> print(test_cut(f := FST(r"""
... (PRE, GET0, GET1 ,)
... """.strip()),
...     0, 3, (False, False)).src, f.src)
(PRE, GET0, GET1 ,) ()

>>> print(test_cut(f := FST(r"""
... [PRE, GET, \
...  ]
... """.strip()),
...     0, 2, (False, False)).src, f.src)
[PRE, GET,] [ \
 ]


need trailing copy separator and don't have (tuple)

>>> print(test_cut(f := FST(r"""
... [PRE, GET]
... """.strip()),
...     1, 2, (False, False)).src, f.src)
[GET] [PRE]

>>> print(test_cut(f := FST(r"""
... (PRE, GET)
... """.strip()),
...     1, 2, (False, False)).src, f.src)
(GET,) (PRE,)


need to delete own trialing separator (list)

>>> print(test_cut(f := FST(r"""
... [PRE,
...  GET]
... """.strip()),
...     1, 2, (False, False)).src, f.src)
[GET] [PRE
 ]

>>> print(test_cut(f := FST(r"""
... (PRE,
...  GET)
... """.strip()),
...     1, 2, (False, False)).src, f.src)
(GET,) (PRE,
 )

>>> print(test_cut(f := FST(r"""
... [PRE ,  # trivia
...  GET]
... """.strip()),
...     1, 2, (False, False)).src, f.src)
[GET] [PRE ,  # trivia
 ]


need to add trailing separator to what is left (tuple)

>>> print(test_cut(f := FST(r"""
... [GET, POST]
... """.strip()),
...     0, 1, (False, False)).src, f.src)
[GET] [POST]

>>> print(test_cut(f := FST(r"""
... (GET, POST)
... """.strip()),
...     0, 1, (False, False)).src, f.src)
(GET,) (POST,)

>>> print(test_cut(f := FST(r"""
... (GET ,  # trivia
...  POST)
... """.strip()),
...     0, 1, (False, False)).src, f.src)
(GET ,) (# trivia
 POST,)

>>> print(test_cut(f := FST(r"""
... (GET ,  # trivia
...  POST)
... """.strip()),
...     0, 1, (False, 'line')).src, f.src)
(GET ,  # trivia
) (
 POST,)


trailing copy separator override

>>> print(test_cut(f := FST(r"""
... (PRE, GET ,  POST)
... """.strip()),
...     1, 2, (False, False), ret_tail_sep=False).src, f.src)
(GET) (PRE, POST)

>>> print(test_cut(f := FST(r"""
... [PRE, GET ,  POST]
... """.strip()),
...     1, 2, (False, False), ret_tail_sep=True).src, f.src)
[GET ,] [PRE, POST]

>>> print(test_cut(f := FST(r"""
... [PRE, GET ,  POST]
... """.strip()),
...     1, 2, (False, False), ret_tail_sep=0).src, f.src)
[GET] [PRE, POST]

>>> print(test_cut(f := FST(r"""
... [PRE, GET
...  ,  POST]
... """.strip()),
...     1, 2, (False, False), ret_tail_sep=0).src, f.src)
[GET
 ] [PRE, POST]

>>> print(test_cut(f := FST(r"""
... [PRE, GET
...  ,  POST]
... """.strip()),
...     1, 2, (False, False), ret_tail_sep=False).src, f.src)
[GET
 ] [PRE, POST]

>>> print(test_cut(f := FST(r"""
... [PRE, GET,  # trivia
...  POST]
... """.strip()),
...     1, 2, (False, 'line'), ret_tail_sep=0).src, f.src)
[GET,  # trivia
] [PRE,
 POST]

>>> print(test_cut(f := FST(r"""
... [PRE, GET,  # trivia
...  POST]
... """.strip()),
...     1, 2, (False, 'line'), ret_tail_sep=False).src, f.src)
[GET  # trivia
] [PRE,
 POST]


trailing self separator override

>>> print(test_cut(f := FST(r"""
... (PRE, GET)
... """.strip()),
...     1, 2, (False, False), self_tail_sep=False).src, f.src)
(GET,) (PRE)

>>> print(test_cut(f := FST(r"""
... [PRE, GET]
... """.strip()),
...     1, 2, (False, False), self_tail_sep=True).src, f.src)
[GET] [PRE,]

>>> print(test_cut(f := FST(r"""
... [PRE, GET, POST]
... """.strip()),
...     1, 2, (False, False), self_tail_sep=True).src, f.src)
[GET] [PRE, POST]

# don't remove existing trailing separator from end of sequence if tail not touched
>>> print(test_cut(f := FST(r"""
... [PRE, GET, POST,]
... """.strip()),
...     1, 2, (False, False), self_tail_sep=False).src, f.src)
[GET] [PRE, POST,]

>>> print(test_cut(f := FST(r"""
... [PRE, GET]
... """.strip()),
...     1, 2, (False, False), self_tail_sep=0).src, f.src)
[GET] [PRE]

>>> print(test_cut(f := FST(r"""
... [PRE
...  , GET]
... """.strip()),
...     1, 2, (False, False), self_tail_sep=0).src, f.src)
[GET] [PRE
 ]

>>> print(test_cut(f := FST(r"""
... [PRE
...  , GET]
... """.strip()),
...     1, 2, (False, False), self_tail_sep=False).src, f.src)
[GET] [PRE
 ]

>>> print(test_cut(f := FST(r"""
... (PRE, GET, POST)
... """.strip()),
...     1, 2, (False, False), self_tail_sep=False).src, f.src)
(GET,) (PRE, POST)

>>> print(test_cut(f := FST(r"""
... (PRE, GET,
...  POST)
... """.strip()),
...     1, 2, (False, False), self_tail_sep=False).src, f.src)
(GET,) (PRE,
 POST)
