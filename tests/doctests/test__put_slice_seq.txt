>>> from pprint import pp
>>> from fst import *
>>> from fst.fst_slice import _put_slice_seq


delete

>>> def test_delete(fst_, start, stop, trivia=None, off=1, field='elts', sep=',', self_tail_sep=None):
...     _put_slice_seq(fst_, start, stop, None, None, None,
...                    fst_.ln, fst_.col + off, fst_.end_ln, fst_.end_col - off,
...                    trivia, None, field, None, sep, self_tail_sep)
...
...     return fst_

>>> print('\n'.join(repr(l) for l in test_delete(FST('[a, b, c]'), 0, 1).lines))
'[b, c]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('[a, b, c]'), 1, 2).lines))
'[a, c]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('[a, b, c]'), 2, 3).lines))
'[a, b]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('[a, b, c]'), 0, 2).lines))
'[c]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('[a, b, c]'), 1, 3).lines))
'[a]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('[a, b, c]'), 0, 3).lines))
'[]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('''
... [a,
...  b]
... '''.strip()), 1, 2).lines))
'[a'
' ]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('''
... [a,
...  b]
... '''.strip()), 1, 2, self_tail_sep=False).lines))
'[a'
' ]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('''
... [a,
...  b]
... '''.strip()), 1, 2, self_tail_sep=True).lines))
'[a,'
' ]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('''
... [a,  # trivia
...  b]
... '''.strip()), 1, 2).lines))
'[a,  # trivia'
' ]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('''
... [a,  # trivia
...  b]
... '''.strip()), 1, 2, self_tail_sep=False).lines))
'[a  # trivia'
' ]'

>>> print('\n'.join(repr(l) for l in test_delete(FST('''
... [a,  # trivia
...  b]
... '''.strip()), 1, 2, self_tail_sep=True).lines))
'[a,  # trivia'
' ]'


>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 1, 3).lines))
'(a,)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 1, 3, self_tail_sep=True).lines))
'(a,)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 1, 3, self_tail_sep=False).lines))
'(a)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 2, 3).lines))
'(a, b)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 2, 3, self_tail_sep=True).lines))
'(a, b,)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 2, 3, self_tail_sep=False).lines))
'(a, b)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 1, 2).lines))
'(a, c)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 1, 2, self_tail_sep=True).lines))
'(a, c,)'

>>> print('\n'.join(repr(l) for l in test_delete(FST('(a, b, c)'), 1, 2, self_tail_sep=False).lines))
'(a, c)'


>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 1, 3, off=0).lines))
'a,'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 1, 3, off=0, self_tail_sep=True).lines))
'a,'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 1, 3, off=0, self_tail_sep=False).lines))
'a'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 2, 3, off=0).lines))
'a, b'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 2, 3, off=0, self_tail_sep=True).lines))
'a, b,'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 2, 3, off=0, self_tail_sep=False).lines))
'a, b'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 1, 2, off=0).lines))
'a, c'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 1, 2, off=0, self_tail_sep=True).lines))
'a, c,'

>>> print('\n'.join(repr(l) for l in test_delete(FST('a, b, c'), 1, 2, off=0, self_tail_sep=False).lines))
'a, c'




replace

>>> def test_replace(fst_, start, stop, new, trivia=None, off=1, field='elts', sep=',', self_tail_sep=None):
...     new_body = getattr(new.a, field)
...
...     _put_slice_seq(fst_, start, stop, new, new_body[0].f, new_body[-1].f,
...                    fst_.ln, fst_.col + off, fst_.end_ln, fst_.end_col - off,
...                    trivia, None, field, None, sep, self_tail_sep)
...
...     return fst_

>>> new000 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3),
...              ['NEW'])

>>> new010 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=2, end_col_offset=0),
...              ['NEW', ''])

>>> new100 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=2, col_offset=0, end_lineno=2, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=2, end_col_offset=3),
...              ['', 'NEW'])

>>> new110 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=2, col_offset=0, end_lineno=2, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=3, end_col_offset=0),
...              ['', 'NEW', ''])


leading newlines

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a,
...  b]
... '''.strip()), 1, 2, new100.copy()).lines))
'[a,'
'NEW]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b]
... '''.strip()), 1, 2, new100.copy()).lines))
'[a,'
'NEW]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new100.copy()).lines))
'[a,'
'NEW, c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new110.copy()).lines))
'[a,'
'NEW,'
'c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a,
...  b]
... '''.strip()), 1, 2, new000.copy()).lines))
'[a,'
' NEW]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new000.copy()).lines))
'[a, NEW, c]'


trailing newlines

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b]
... '''.strip()), 1, 2, new010.copy()).lines))
'[a, NEW'
']'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new010.copy()).lines))
'[a, NEW,'
' c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b
...  ]
... '''.strip()), 1, 2, new010.copy()).lines))
'[a, NEW'
' ]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b,
...  c]
... '''.strip()), 1, 2, new010.copy()).lines))
'[a, NEW,'
' c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new110.copy()).lines))
'[a,'
'NEW,'
'c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b,
...  c]
... '''.strip()), 1, 2, new110.copy()).lines))
'[a,'
'NEW,'
' c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a,
...  b,
...  c]
... '''.strip()), 1, 2, new110.copy()).lines))
'[a,'
'NEW,'
' c]'



# same but with new slice having trailing comma

>>> new001 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=4),
...              ['NEW,'])

>>> new011 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=2, end_col_offset=0),
...              ['NEW,', ''])

>>> new101 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=2, col_offset=0, end_lineno=2, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=2, end_col_offset=4),
...              ['', 'NEW,'])

>>> new111 = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=2, col_offset=0, end_lineno=2, end_col_offset=3)],
...                                         ctx=Load(), lineno=1, col_offset=0, end_lineno=3, end_col_offset=0),
...              ['', 'NEW,', ''])


leading newlines

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a,
...  b]
... '''.strip()), 1, 2, new101.copy()).lines))
'[a,'
'NEW]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b]
... '''.strip()), 1, 2, new101.copy()).lines))
'[a,'
'NEW]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new101.copy()).lines))
'[a,'
'NEW, c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new111.copy()).lines))
'[a,'
'NEW,'
'c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a,
...  b]
... '''.strip()), 1, 2, new001.copy()).lines))
'[a,'
' NEW]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new001.copy()).lines))
'[a, NEW, c]'


trailing newlines

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b]
... '''.strip()), 1, 2, new011.copy()).lines))
'[a, NEW'
']'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new011.copy()).lines))
'[a, NEW,'
' c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b
...  ]
... '''.strip()), 1, 2, new011.copy()).lines))
'[a, NEW'
' ]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b,
...  c]
... '''.strip()), 1, 2, new011.copy()).lines))
'[a, NEW,'
' c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new111.copy()).lines))
'[a,'
'NEW,'
'c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b,
...  c]
... '''.strip()), 1, 2, new111.copy()).lines))
'[a,'
'NEW,'
' c]'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a,
...  b,
...  c]
... '''.strip()), 1, 2, new111.copy()).lines))
'[a,'
'NEW,'
' c]'



# self_tail_sep and tuples

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 0, 3, new000.copy()).lines))
'(NEW,)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 0, 3, new000.copy(), self_tail_sep=True).lines))
'(NEW,)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 0, 3, new000.copy(), self_tail_sep=False).lines))
'(NEW)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 1, 3, new000.copy()).lines))
'(a, NEW)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 1, 3, new000.copy(), self_tail_sep=True).lines))
'(a, NEW,)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 1, 3, new000.copy(), self_tail_sep=False).lines))
'(a, NEW)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 0, 2, new000.copy()).lines))
'(NEW, c)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 0, 2, new000.copy(), self_tail_sep=True).lines))
'(NEW, c,)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c)
... '''.strip()), 0, 2, new000.copy(), self_tail_sep=False).lines))
'(NEW, c)'

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... (a, b, c,)
... '''.strip()), 0, 2, new000.copy(), self_tail_sep=False).lines))
'(NEW, c,)'




replace

>>> def test_insert(fst_, idx, new, trivia=None, off=1, field='elts', sep=',', self_tail_sep=None):
...     new_body = getattr(new.a, field)
...
...     _put_slice_seq(fst_, idx, idx, new, new_body[0].f, new_body[-1].f,
...                    fst_.ln, fst_.col + off, fst_.end_ln, fst_.end_col - off,
...                    trivia, None, field, None, sep, self_tail_sep)
...
...     return fst_


>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... []
... '''.strip()), 0, new000.copy()).lines))
'[NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 0, new000.copy()).lines))
'[NEW, a, b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 1, new000.copy()).lines))
'[a, NEW, b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 2, new000.copy()).lines))
'[a, b, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 0, new001.copy()).lines))
'[NEW, a, b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 1, new001.copy()).lines))
'[a, NEW, b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 2, new001.copy()).lines))
'[a, b, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 0, new110.copy()).lines))
'['
'NEW,'
'a, b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 1, new110.copy()).lines))
'[a,'
'NEW,'
'b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 2, new110.copy()).lines))
'[a, b,'
'NEW'
']'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 0, new111.copy()).lines))
'['
'NEW,'
'a, b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 1, new111.copy()).lines))
'[a,'
'NEW,'
'b]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a, b]
... '''.strip()), 2, new111.copy()).lines))
'[a, b,'
'NEW'
']'


# trailing separators

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... ()
... '''.strip()), 0, new000.copy()).lines))
'(NEW,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... ()
... '''.strip()), 0, new001.copy()).lines))
'(NEW,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... ()
... '''.strip()), 0, new000.copy(), self_tail_sep=False).lines))
'(NEW)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... ()
... '''.strip()), 0, new001.copy(), self_tail_sep=False).lines))
'(NEW)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... ()
... '''.strip()), 0, new000.copy(), self_tail_sep=True).lines))
'(NEW,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... ()
... '''.strip()), 0, new001.copy(), self_tail_sep=True).lines))
'(NEW,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... []
... '''.strip()), 0, new000.copy()).lines))
'[NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... []
... '''.strip()), 0, new001.copy()).lines))
'[NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... []
... '''.strip()), 0, new000.copy(), self_tail_sep=False).lines))
'[NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... []
... '''.strip()), 0, new001.copy(), self_tail_sep=False).lines))
'[NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... []
... '''.strip()), 0, new000.copy(), self_tail_sep=True).lines))
'[NEW,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... []
... '''.strip()), 0, new001.copy(), self_tail_sep=True).lines))
'[NEW,]'


>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 0, new000.copy()).lines))
'(NEW, a,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 0, new001.copy()).lines))
'(NEW, a,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 0, new000.copy(), self_tail_sep=False).lines))
'(NEW, a,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 0, new001.copy(), self_tail_sep=False).lines))
'(NEW, a,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 0, new000.copy(), self_tail_sep=True).lines))
'(NEW, a,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 0, new001.copy(), self_tail_sep=True).lines))
'(NEW, a,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 0, new000.copy()).lines))
'[NEW, a,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 0, new001.copy()).lines))
'[NEW, a,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 0, new000.copy(), self_tail_sep=False).lines))
'[NEW, a,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 0, new001.copy(), self_tail_sep=False).lines))
'[NEW, a,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 0, new000.copy(), self_tail_sep=True).lines))
'[NEW, a,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 0, new001.copy(), self_tail_sep=True).lines))
'[NEW, a,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 0, new000.copy()).lines))
'[NEW, a]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 0, new001.copy()).lines))
'[NEW, a]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 0, new000.copy(), self_tail_sep=False).lines))
'[NEW, a]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 0, new001.copy(), self_tail_sep=False).lines))
'[NEW, a]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 0, new000.copy(), self_tail_sep=True).lines))
'[NEW, a,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 0, new001.copy(), self_tail_sep=True).lines))
'[NEW, a,]'


>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 1, new000.copy()).lines))
'(a, NEW)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 1, new001.copy()).lines))
'(a, NEW)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 1, new000.copy(), self_tail_sep=False).lines))
'(a, NEW)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 1, new001.copy(), self_tail_sep=False).lines))
'(a, NEW)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 1, new000.copy(), self_tail_sep=True).lines))
'(a, NEW,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... (a,)
... '''.strip()), 1, new001.copy(), self_tail_sep=True).lines))
'(a, NEW,)'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 1, new000.copy()).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 1, new001.copy()).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 1, new000.copy(), self_tail_sep=False).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 1, new001.copy(), self_tail_sep=False).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 1, new000.copy(), self_tail_sep=True).lines))
'[a, NEW,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a,]
... '''.strip()), 1, new001.copy(), self_tail_sep=True).lines))
'[a, NEW,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 1, new000.copy()).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 1, new001.copy()).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 1, new000.copy(), self_tail_sep=False).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 1, new001.copy(), self_tail_sep=False).lines))
'[a, NEW]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 1, new000.copy(), self_tail_sep=True).lines))
'[a, NEW,]'

>>> print('\n'.join(repr(l) for l in test_insert(FST('''
... [a]
... '''.strip()), 1, new001.copy(), self_tail_sep=True).lines))
'[a, NEW,]'



fix comment or line continuation backslash without trailing newline

>>> new = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3)],
...                                      ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3),
...               ['NEW#'])

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new.copy()).lines))
'[a, NEW, #'
' c]'

>>> new = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3)],
...                                      ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3),
...                ['NEW\\'])

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 2, new.copy()).lines))
'[a, NEW, \\'
' c]'


don't remove comma with stuff after it

>>> new = FST(Tuple(elts=[Name(id='NEW', ctx=Load(), lineno=1, col_offset=0, end_lineno=1, end_col_offset=3)],
...                                      ctx=Load(), lineno=1, col_offset=0, end_lineno=2, end_col_offset=0),
...               ['NEW, #', ''])

>>> print('\n'.join(repr(l) for l in test_replace(FST('''
... [a, b, c]
... '''.strip()), 1, 3, new.copy()).lines))
'[a, NEW, #'
']'



delete (two-element sequence)

>>> def test_delete2(fst_, start, stop, trivia=None, off=1, field='keys', field2='values', sep=',', self_tail_sep=None):
...     _put_slice_seq(fst_, start, stop, None, None, None,
...                    fst_.ln, fst_.col + off, fst_.end_ln, fst_.end_col - off,
...                    trivia, None, field, field2, sep, self_tail_sep)
...
...     return fst_

>>> print('\n'.join(repr(l) for l in test_delete2(FST('{**a, **b, **c}'), 0, 1).lines))
'{**b, **c}'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('{**a, **b, **c}'), 1, 2).lines))
'{**a, **c}'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('{**a, **b, **c}'), 2, 3).lines))
'{**a, **b}'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('{**a, **b, **c}'), 0, 2).lines))
'{**c}'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('{**a, **b, **c}'), 1, 3).lines))
'{**a}'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('{**a, **b, **c}'), 0, 3).lines))
'{}'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('''
... {**a,
...  **b}
... '''.strip()), 1, 2).lines))
'{**a'
' }'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('''
... {**a,
...  **b}
... '''.strip()), 1, 2, self_tail_sep=False).lines))
'{**a'
' }'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('''
... {**a,
...  **b}
... '''.strip()), 1, 2, self_tail_sep=True).lines))
'{**a,'
' }'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('''
... {**a,  # trivia
...  **b}
... '''.strip()), 1, 2).lines))
'{**a,  # trivia'
' }'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('''
... {**a,  # trivia
...  **b}
... '''.strip()), 1, 2, self_tail_sep=False).lines))
'{**a  # trivia'
' }'

>>> print('\n'.join(repr(l) for l in test_delete2(FST('''
... {**a,  # trivia
...  **b}
... '''.strip()), 1, 2, self_tail_sep=True).lines))
'{**a,  # trivia'
' }'
